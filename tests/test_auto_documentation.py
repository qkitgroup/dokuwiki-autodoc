import io
from dokuwiki_autodoc.autodoc import AutoDocumentation, QkitDocumentationBuilder
from time import time

USERNAME = "user"
PASSWD = "password"

TEMPLATE_TEXT_ONLY = """
====== [[ sample_name ]] ======

===== Information =====
Condition: [[ condition ]]

===== Results =====
Result: [[ result ]]
"""

TEMPLATE_WITH_IMAGE = TEMPLATE_TEXT_ONLY + """

Image:
{{ [[image_id]]?200 }}
"""

def test_login(monkeypatch):
    monkeypatch.setattr('builtins.input', lambda prompt: USERNAME)
    monkeypatch.setattr('getpass.getpass', lambda prompt: PASSWD)
    AutoDocumentation("http://localhost")

def test_report_generation(monkeypatch):
    monkeypatch.setattr('builtins.input', lambda prompt: USERNAME)
    monkeypatch.setattr('getpass.getpass', lambda prompt: PASSWD)
    doc = AutoDocumentation("http://localhost")
    data = {'sample_name': "Test Sample", 'condition': "good", 'result': "Fine"}
    doc.generate_report('sample:test:report', data, TEMPLATE_TEXT_ONLY)

def test_image_upload(monkeypatch):
    monkeypatch.setattr('builtins.input', lambda prompt: USERNAME)
    monkeypatch.setattr('getpass.getpass', lambda prompt: PASSWD)
    doc = AutoDocumentation("http://localhost")
    id = 'sample:test:images:unique_id.png'
    doc.upload_image(id, 'tests/example.png')

def test_full_report(monkeypatch):
    monkeypatch.setattr('builtins.input', lambda prompt: USERNAME)
    monkeypatch.setattr('getpass.getpass', lambda prompt: PASSWD)
    doc = AutoDocumentation("http://localhost")

    id = 'sample:test:images:unique_id.png'
    doc.upload_image(id, 'tests/example.png')

    data = {'sample_name': "Test Sample", 'condition': "good", 'result': "Fine", 'image_id': id}
    doc.generate_report('sample:test:image_report', data, TEMPLATE_WITH_IMAGE)

def test_link_formating(monkeypatch):
    link = "some:link"
    text = "some alt text"
    assert AutoDocumentation.format_link(link) == "[[some:link]]"
    assert AutoDocumentation.format_link(link, text) == "[[some:link|some alt text]]"

def test_table_append(monkeypatch):
    monkeypatch.setattr('builtins.input', lambda prompt: USERNAME)
    monkeypatch.setattr('getpass.getpass', lambda prompt: PASSWD)
    doc = AutoDocumentation("http://localhost")

    columns = ['name', 'date', 'link']
    data = ['Test', time(), AutoDocumentation.format_link("https://example.com", "Example")]
    doc.append_table('sample:test:table', columns, data)

QKIT_TEMPLATE = """
====== Measurement [[measurement.uuid]] ======
User: [[measurement.user]]

Run: [[measurement.run_id]]

Type: [[measurement.measurement_type]] with [[measurement.measurement_func]]

QKIT-Version: [[measurement.git_commit_id]]

===== Settings =====
IVD: PLC [[settings.IVD.plc]]

===== Images =====
[% for image in images %]
{{[[image]]}}
[% endfor %]

This report is autogenerated from QKit HDF5 files.
"""

def test_qkit_measurement_documentation(mocker):
    import qkit
    qkit.cfg['datadir'] = "/path/to/testdata"
    qkit.start()

    class MockedDoc:
        append_table = mocker.stub(name="append_table_stub")
        upload_image = mocker.stub(name="upload_image_stub")
        generate_report = mocker.stub(name="generate_report_stub")

    doc = MockedDoc()

    with QkitDocumentationBuilder(doc, 'sample:test:qkit', 'SAMPLE_UUID') as builder:
        builder.upload_images()
        builder.generate_report(QKIT_TEMPLATE)
        builder.generate_table_entry(["Type", "Comment"], lambda data: [
            data.measurement['measurement_type'], 
            "Look! A comment!"
        ])

    doc.append_table.assert_called_once()
    doc.upload_image.assert_called()
    doc.generate_report.assert_called_once()